stages:
- build
- test
- release
- deploy

services:
- docker:dind

variables:
  # GKE info
  CLUSTER_NAME: test-cluster
  ZONE: us-central1-a
  PROJECT: astrify-cluster
  DOMAIN_NAME: claimcheck.astrify.com # application domain name

  CHART_PATH: ./charts/claimcheck
  CONTAINER_IMAGE: registry.gitlab.com/astrify/stellar-claimcheck
  CONTAINER_IMAGE_BUILT: ${CONTAINER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CI_REGISTRY: registry.gitlab.com  # container registry URL
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375  # required since we use dind

  SERVICE_ACCOUNT: /etc/deploy/sa.json
  STAGE_NAMESPACE: astrify-stage
  PROD_NAMESPACE: astrify-prod
  STAGE_RELEASE_NAME: astrify-stage-claimcheck
  PROD_RELEASE_NAME: astrify-prod-claimcheck

# build container image
build:
  stage: build
  image: docker:latest
  services:
  - docker:dind
  script:
  - export
  - echo "Building Dockerfile-based application..."
  - docker build -t ${CONTAINER_IMAGE_BUILT} .
  - echo $CI_JOB_TOKEN | docker login --username=gitlab-ci-token --password-stdin $CI_REGISTRY
  - echo "Pushing to the Container Registry..."
  - docker push ${CONTAINER_IMAGE_BUILT}

# run tests against built image
test:
  stage: test
  script:
  - exit 0

# tag container image that passed the tests successfully
# and push it to the registry
release:
  stage: release
  image: docker:latest
  services:
  - docker:dind
  script:
  - echo $CI_JOB_TOKEN | docker login --username=gitlab-ci-token --password-stdin $CI_REGISTRY
  - echo "Pulling docker image from Container Registry"
  - docker pull ${CONTAINER_IMAGE_BUILT}
  - echo "Logging to Container Registry at ${CI_REGISTRY}"
  - echo "Pushing to Container Registry..."
  - docker tag ${CONTAINER_IMAGE_BUILT} ${CONTAINER_IMAGE}:$(cat VERSION)
  - docker push ${CONTAINER_IMAGE}:$(cat VERSION)
  - docker tag ${CONTAINER_IMAGE}:$(cat VERSION) ${CONTAINER_IMAGE_LATEST}
  - docker push ${CONTAINER_IMAGE_LATEST}
  - echo ""
  only:
  - master

# deploy to staging environment
deploy_staging:
  stage: deploy
  image: artemkin/helm-gke:1.0
  before_script:
  - mkdir -p /etc/deploy
  - echo ${service_account} | base64 -d > ${SERVICE_ACCOUNT}
  - gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT}
  - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
  - helm init --client-only
  script:
  - helm upgrade --install
    --set image.tag=$(cat VERSION)
    --set ingress.enabled=false
    --set image.repository=${CONTAINER_IMAGE}
    --set imageCredentials.name=gitlab-deploy-token
    --set imageCredentials.registry=${CI_REGISTRY}
    --set imageCredentials.username=${CI_DEPLOY_USER}
    --set imageCredentials.password=${CI_DEPLOY_PASSWORD}
    --wait
    --namespace=${STAGE_NAMESPACE}
    ${STAGE_RELEASE_NAME} ${CHART_PATH}
  environment:
    name: staging
  only:
  - master

# deploy to production environment (manual)
deploy_prod:
  stage: deploy
  image: artemkin/helm-gke:1.0
  before_script:
  - mkdir -p /etc/deploy
  - echo ${service_account} | base64 -d > ${SERVICE_ACCOUNT}
  - gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT}
  - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
  - helm init --client-only
  script:
  - helm upgrade --install
    --set image.tag=$(cat VERSION)
    --set image.repository=${CONTAINER_IMAGE}
    --set ingress.hosts[0]=${DOMAIN_NAME}
    --set ingress.tls[0].secretName=ui-tls,ingress.tls[0].hosts={${DOMAIN_NAME}}
    --set imageCredentials.name=gitlab-deploy-token
    --set imageCredentials.registry=${CI_REGISTRY}
    --set imageCredentials.username=${CI_DEPLOY_USER}
    --set imageCredentials.password=${CI_DEPLOY_PASSWORD}
    --wait
    --namespace=${PROD_NAMESPACE}
    ${PROD_RELEASE_NAME} ${CHART_PATH}
  environment:
    name: production
    url: https://${DOMAIN_NAME}
  when: manual
  only:
  - master